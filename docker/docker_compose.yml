version: '3.5'

x-common-variables: &common-variables
  CELERY_BROKER_URL: ${CELERY_BROKER_URL}
  CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
  CELERY_ACCEPT_CONTENT: ${CELERY_ACCEPT_CONTENT}
  CELERY_TASK_SERIALIZER: ${CELERY_TASK_SERIALIZER}
  CELERY_RESULT_SERIALIZER: ${CELERY_RESULT_SERIALIZER}
  CELERY_TIMEZONE: ${CELERY_TIMEZONE}
  DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
  POSTGRES_HOST: ${POSTGRES_HOST}
  POSTGRES_DB: ${POSTGRES_DB}
  POSTGRES_PORT: ${POSTGRES_PORT}
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

services:
  financial_news:
    image: financial_news
    container_name: financial_news_container
    network_mode: "host"
    environment: *common-variables
    command: /bin/sh -c "sleep 1 && python manage.py migrate && python manage.py runserver"
    depends_on:
      - redis
      - postgres
    ports:
      - "8000:8000"
    restart: "on-failure"

  redis:
    image: redis:7-alpine
    container_name: redis_container
    restart: "always"
    hostname: redis
    volumes:
      - redis_data:/var/lib/redis/data
    command: redis-server --save 60 1 --loglevel warning
    ports:
      - "6379:6379"

  postgres:
    image: postgres:14-alpine
    container_name: postgres_container
    environment: *common-variables
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    restart: "on-failure"

  celery_worker:
    image: financial_news
    container_name: celery_worker_container
    network_mode: "host"
    environment: *common-variables
    command: "celery -A core worker -l INFO"
    depends_on:
      - postgres
      - redis
    restart: "on-failure"


  celery_beat:
    image: financial_news
    container_name: celery_beat_container
    network_mode: "host"
    environment: *common-variables
    command: "celery -A core beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    depends_on:
      - postgres
      - redis
      - celery_worker
    restart: "on-failure"

volumes:
  redis_data: {}
  postgres_data: {}

networks:
  default:
    name: main_network
